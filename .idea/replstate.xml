<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1464937748947">{:repl-history {:ide [], :local [&quot;(require '[com.vividsolutions.jts.operation.overlay.snap SnapOverlayOp])&quot; &quot;(def holeln (line-string [(18 55, 33 55, 32 51, 16 51, 18 55)]))&quot; &quot;(def holeln (line-string [(c 18 55) (c 33 55) (c 32 51) (c 16 51) (18 55)]))&quot; &quot;(def holeln (linear-ring [(c 18 55) (c 33 55) (c 32 51) (c 16 51) (18 55)]))&quot; &quot;(def holeln (line-string [(c 18 55) (c 33 55) (c 32 51) (c 16 51) (c 18 55)]))&quot; &quot;(distance holeln pol1)&quot; &quot;(def vex1 (point (c 18 55)))&quot; &quot;(def lines1 [(c 7 64) (43 64)])&quot; &quot;(def lines1 [(c 7 64) (c 43 64)])&quot; &quot;(distance vex1 lines1)&quot; &quot;(relation vex1 lines1)&quot; &quot;(println vex1)&quot; &quot;(def lines1 (line-string [(c 7 64) (c 43 64)])&quot; &quot;(def lines1 (line-string [(c 7 64) (c 43 64)]))&quot; &quot;(println lines1)&quot; &quot;(distance lines1 vex1)&quot; &quot;lines1&quot; &quot;vex1&quot; &quot;(get-coords pol1)&quot; &quot;(get-coords lines1)&quot; &quot;(get-coords vex1)&quot; &quot;(sort (get-coords pol1))&quot; &quot;(sort (get-coords hole))&quot; &quot;hole&quot; &quot;(sort hole)&quot; &quot;(ns field-pathp.core\n  (:refer-clojure :exclude [empty?])\n  (:use [cljts geom analysis transform relation])\n  (:import [com.vividsolutions.jts.geom Coordinate Geometry Polygon LinearRing Point GeometryFactory PrecisionModel]))\n\n(def pol1 (polygon\n            (linear-ring [(c 7 64) (c 43 64) (c 39 37) (c 7 37) (c 7 64)])\n            [(linear-ring [(c 18 55) (c 33 55) (c 32 51) (c 16 51) (c 18 55)])]))\n\n(defn coord-vec\n  \&quot;Convert a JTS Coordinate to a vector.\&quot;\n  [^Coordinate coordinate]\n  (if (.isNaN (.z coordinate))\n    [(.x coordinate) (.y coordinate)]\n    [(.x coordinate) (.y coordinate) (.z coordinate)]))\n\n(defn get-coords\n  \&quot;Return a vec of coords for a JTS Geometry.\&quot;\n  [^Geometry geometry]\n  (mapv coord-vec (.getCoordinates geometry)))\n\n(defn get-interior-rings\n  \&quot;Return a seq of JTS LinearRing that represent the holes in a Polygon.\&quot;\n  [^Polygon geometry]\n  (for [i (range 0 (.getNumInteriorRing geometry))]\n    (.getInteriorRingN geometry i)))\n\n(defn get-hole-coords\n  \&quot;Return a vec of coord data that represents the holes of a JTS Polygon.\&quot;\n  [^Polygon geometry]\n  (mapv get-coords (get-interior-rings geometry)))\n\n(def hole (get-hole-coords pol1))\n\n(def enve (envelope pol1))&quot; &quot;(def get-coords enve)&quot; &quot;(defn get-coords\n  \&quot;Return a vec of coords for a JTS Geometry.\&quot;\n  [^Geometry geometry]\n  (mapv coord-vec (.getCoordinates geometry)))&quot; &quot;rectan1 [2]&quot; &quot;(second rectan1)&quot; &quot;(fourth rectan1)&quot; &quot;(rest rectan1)&quot; &quot;(first rectan1)&quot; &quot;(get rectan1 4)&quot; &quot;(distance [(get rectan1 2) (get rectan1 3)] )&quot; &quot;(distance (get rectan1 2) (get rectan1 3))&quot; &quot;(distance (point (get rectan1 2)) (point (get rectan1 3)))&quot; &quot;(def point1 (get-coords (get rectan1 2)))&quot; &quot;(def point1 ((get rectan1 2)))&quot; &quot;(def point1 (first rectan1))&quot; &quot;(def point1 (point (c (get rectan1 2))))&quot; &quot;(def point1 (point ((get rectan1 2))))&quot; &quot;(def point1 (point (get-coords (get rectan1 2))))&quot; &quot;(def line-string (get rectan1 2) (get rectan1 3))&quot; &quot;(def linetop (line-string (get rectan1 2) (get rectan1 3)) )&quot; &quot;(def linetop (line-string [(get rectan1 2) (get rectan1 3)] ) )&quot; &quot;(def linetop (line-string [(get rectan1 2)] [(get rectan1 3)] ) )&quot; &quot;(def linetop (.LineString [(get rectan1 2)] [(get rectan1 3)] ) )&quot; &quot;(def linetop (line-string  [c (get rectan1 2)] [c (get rectan1 3)] ) )&quot; &quot;(def linetop (line-string  [(get rectan1 2)] [(get rectan1 3)] ) )&quot; &quot;(get rectan1 3)&quot; &quot;(get rectan1 2)&quot; &quot;(def point 1 (get rectan1 1))&quot; &quot;(def point1 (get rectan1 1))&quot; &quot;point 1&quot; &quot;point1&quot; &quot;(def point1 (point (get rectan1 1)) )&quot; &quot;(ns field-pathp.core\n  (:refer-clojure :exclude [empty?])\n  (:use [cljts geom analysis transform relation])\n  (:import [com.vividsolutions.jts.geom Coordinate Geometry Polygon LineString LinearRing Point GeometryFactory PrecisionModel]))&quot; &quot;(def lines1 (.LineString [(get rectan1 1) (get rectan1 2)]))&quot; &quot;(import [com.vividsolutions.jts.geom Coordinate Geometry Polygon LineString LinearRing Point GeometryFactory PrecisionModel])&quot; &quot;(defn ^LineString line-string\n  \&quot;Return a JTS LineString given a collection of coord vectors.\n   e.g. (line-string [[2 8] [4 3]])\&quot;\n  [coords]\n  (.createLineString geom-factory (coord-array coords)))&quot; &quot;(line-string [(get rectan1 1) (get rectan1 2)])&quot; &quot;(line-string [[(get rectan1 1)] [(get rectan1 2)]])&quot; &quot;(get rectan1 1)&quot; &quot;(line-string (get rectan1 1) (get recta1 2))&quot; &quot;(line-string [[7.0 64.0] [43.0 64.0]])&quot; &quot;(line-string [[7 64] [43 64]])&quot; &quot;(def lns (line-string [[7 64] [43 64]]) )&quot; &quot;(line-string [[2 8] [4 3]])&quot; &quot;(ns field-pathp.core\n  (:refer-clojure :exclude [empty?])\n  (:use [cljts geom analysis transform relation])\n  (:import [com.vividsolutions.jts.geom Coordinate Geometry Polygon LineString LinearRing Point GeometryFactory PrecisionModel]))\n\n(def pol1 (polygon\n            (linear-ring [(c 7 64) (c 43 64) (c 39 37) (c 7 37) (c 7 64)])\n            [(linear-ring [(c 18 55) (c 33 55) (c 32 51) (c 16 51) (c 18 55)])]))\n\n(defn coord-vec\n  \&quot;Convert a JTS Coordinate to a vector.\&quot;\n  [^Coordinate coordinate]\n  (if (.isNaN (.z coordinate))\n    [(.x coordinate) (.y coordinate)]\n    [(.x coordinate) (.y coordinate) (.z coordinate)]))\n\n(defn get-coords\n  \&quot;Return a vec of coords for a JTS Geometry.\&quot;\n  [^Geometry geometry]\n  (mapv coord-vec (.getCoordinates geometry)))\n\n(defn get-interior-rings\n  \&quot;Return a seq of JTS LinearRing that represent the holes in a Polygon.\&quot;\n  [^Polygon geometry]\n  (for [i (range 0 (.getNumInteriorRing geometry))]\n    (.getInteriorRingN geometry i)))\n\n(defn get-hole-coords\n  \&quot;Return a vec of coord data that represents the holes of a JTS Polygon.\&quot;\n  [^Polygon geometry]\n  (mapv get-coords (get-interior-rings geometry)))\n\n(def hole (get-hole-coords pol1))\n\n(def enve (envelope pol1))&quot; &quot;enve&quot; &quot;(def rectan1 (get-coords enve))&quot; &quot;(c rectan1)&quot; &quot;rectan1&quot; &quot;rectan1 1&quot; &quot;(rectan1 1)&quot; &quot;(c (rectan1 1))&quot; &quot;(coordinates (rectan1 1))&quot; &quot;(coordinates (rectan1))&quot; &quot;(coordinates rectan1)&quot; &quot;(coordinates (get-coords rectan1))&quot; &quot;((get-coords rectan1))&quot; &quot;(get-coords enve)&quot; &quot;(coordinates enve)&quot; &quot;(def envecoord (coordinates enve))&quot; &quot;envecoord&quot; &quot;(line-string (envecoord 2) (envecoord 3))&quot; &quot;(line-string (envecoord 2))&quot; &quot;(line-string [(envecoord 2) (envecoord 3)])&quot; &quot;(def toplns (line-string [(envecoord 2) (envecoord 3)]))&quot; &quot;(def toplns (line-string [(envecoord 1) (envecoord 2)]))&quot; &quot;toplns&quot; &quot;(def botlns (line-string [(envecoord 3) (envecoord 4)]))&quot; &quot;botlns&quot; &quot;(length toplns)&quot; &quot;(length botlns)&quot; &quot;(def toolsize 5)&quot; &quot;(loop [x (length toplns)]\n  (println x)\n  (recur ( - x toolsize)))&quot; &quot;(.SnapOverlayOp pol1 decompln1)&quot; &quot;pol1&quot; &quot;decompln1&quot;], :remote []}}</component>
</project>